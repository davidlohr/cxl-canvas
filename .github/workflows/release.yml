name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  pages: write
  id-token: write
  actions: read

jobs:
  test-before-release:
    name: Pre-Release Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        # Try npm ci first, fallback to npm install if package-lock.json issues
        npm ci || npm install
      
    - name: Run full test suite
      run: npm run test:full
      
    - name: Run browser compatibility tests
      run: |
        sudo apt-get update
        # Install core Puppeteer dependencies
        sudo apt-get install -y \
          libnss3-dev \
          libatk-bridge2.0-dev \
          libdrm2 \
          libxkbcommon0 \
          libgbm1 \
          libxss1 \
          libxrandr2 \
          libpangocairo-1.0-0 \
          libatk1.0-0 \
          libcairo-gobject2 \
          libgtk-3-0 \
          libgdk-pixbuf2.0-0 \
          fonts-liberation \
          libappindicator3-1 \
          libu2f-udev \
          xdg-utils
        
        # Install audio dependencies with fallback
        sudo apt-get install -y libasound2 || sudo apt-get install -y libasound2-dev || echo "Audio packages not available"
        
        # Try to install optional dependencies
        sudo apt-get install -y libgconf-2-4 || echo "libgconf-2-4 not available (optional)"
        
        npm run test:browser-compat
        
    - name: Run QEMU validation
      run: |
        sudo apt-get install -y qemu-system-x86
        npm run test:qemu-validation
        
    - name: Validate release readiness
      run: |
        echo "âœ… All tests passed - ready for release"
        
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: test-before-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        # Try npm ci first, fallback to npm install if package-lock.json issues
        npm ci || npm install
      
    - name: Generate release notes
      run: |
        echo "# CXL Canvas Release" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## Features" >> RELEASE_NOTES.md
        echo "- Interactive CXL topology builder" >> RELEASE_NOTES.md
        echo "- Real-time QEMU command generation" >> RELEASE_NOTES.md
        echo "- Comprehensive testing infrastructure" >> RELEASE_NOTES.md
        echo "- Browser compatibility validation" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## Technical Details" >> RELEASE_NOTES.md
        echo "- Single-file HTML application" >> RELEASE_NOTES.md
        echo "- No build process required" >> RELEASE_NOTES.md
        echo "- Compatible with modern browsers" >> RELEASE_NOTES.md
        echo "- Extensive test coverage" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## Testing" >> RELEASE_NOTES.md
        echo "- $(npm test 2>&1 | grep -E 'Total Tests:|Passed:|Success Rate:' | wc -l) test categories" >> RELEASE_NOTES.md
        echo "- Browser compatibility validated" >> RELEASE_NOTES.md
        echo "- QEMU command syntax verified" >> RELEASE_NOTES.md
        
    - name: Create release package
      run: |
        mkdir -p release-package
        cp index.html release-package/
        cp README.md release-package/
        cp CLAUDE.md release-package/
        cp RELEASE_NOTES.md release-package/
        
        # Create package info
        echo "CXL Canvas Release Package" > release-package/PACKAGE_INFO.txt
        echo "Generated: $(date)" >> release-package/PACKAGE_INFO.txt
        echo "Commit: $GITHUB_SHA" >> release-package/PACKAGE_INFO.txt
        echo "Tag: $GITHUB_REF_NAME" >> release-package/PACKAGE_INFO.txt
        
        # Create ZIP archive
        cd release-package && zip -r ../cxl-canvas-release.zip . && cd ..
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-package
        path: release-package/
        retention-days: 90
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name || github.event.inputs.version }}
        name: CXL Canvas ${{ github.ref_name || github.event.inputs.version }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
        files: cxl-canvas-release.zip
        token: ${{ secrets.GITHUB_TOKEN }}

  deploy-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: create-release
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: read
      pages: write
      id-token: write
      actions: read
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Prepare Pages deployment
      run: |
        mkdir -p _site
        cp index.html _site/
        cp README.md _site/
        
        # Create a simple index page if needed
        if [ ! -f _site/index.html ]; then
          cp index.html _site/index.html
        fi
        
        # Add deployment info
        echo "<!-- Deployed from GitHub Actions on $(date) -->" >> _site/index.html
        
    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '_site'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
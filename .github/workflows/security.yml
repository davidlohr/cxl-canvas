name: Security

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: read

jobs:
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        # Try npm ci first, fallback to npm install if package-lock.json issues
        npm ci || npm install
      
    - name: Run npm audit
      run: |
        echo "Running npm security audit..."
        npm audit --audit-level=moderate || echo "Audit completed with findings"
        
    - name: Generate audit report
      run: |
        echo "# Security Audit Report - $(date)" > security-audit-report.md
        echo "" >> security-audit-report.md
        echo "## NPM Audit Results" >> security-audit-report.md
        npm audit --json > audit-results.json || true
        
        if [ -s audit-results.json ]; then
          echo "Audit completed - see detailed results in audit-results.json"
          echo "" >> security-audit-report.md
          echo "### Summary" >> security-audit-report.md
          jq -r '.metadata | "- Total vulnerabilities: \(.vulnerabilities.total // 0)\n- High severity: \(.vulnerabilities.high // 0)\n- Moderate severity: \(.vulnerabilities.moderate // 0)\n- Low severity: \(.vulnerabilities.low // 0)"' audit-results.json >> security-audit-report.md || echo "Could not parse audit results" >> security-audit-report.md
        fi
        
    - name: Check for known security advisories
      run: |
        echo "Checking for security advisories..."
        npx audit-ci --moderate || echo "Security advisories check completed"
        

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        # Try npm ci first, fallback to npm install if package-lock.json issues
        npm ci || npm install
      
    - name: Install license checker
      run: npm install -g license-checker
      
    - name: Check licenses
      run: |
        echo "Checking dependency licenses..."
        license-checker --summary
        license-checker --json --out license-report.json
        
    - name: Validate license compatibility
      run: |
        echo "Validating license compatibility..."
        
        # Check for problematic licenses
        if license-checker --summary | grep -E "(GPL|AGPL)" > problematic-licenses.txt; then
          echo "⚠️ Found potentially problematic licenses:"
          cat problematic-licenses.txt
          echo "Please review these licenses for compatibility"
        else
          echo "✅ No problematic licenses found"
        fi
        
    - name: Generate license report
      run: |
        echo "# License Compliance Report - $(date)" > license-compliance-report.md
        echo "" >> license-compliance-report.md
        echo "## License Summary" >> license-compliance-report.md
        license-checker --summary >> license-compliance-report.md
        echo "" >> license-compliance-report.md
        echo "## Detailed License Information" >> license-compliance-report.md
        echo "See license-report.json for complete details" >> license-compliance-report.md
        

  code-scanning:
    name: Code Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      
    - name: Static security analysis
      run: |
        echo "Running additional static analysis..."
        
        # Check for common security patterns in HTML/JS
        echo "Checking for potential security issues..."
        
        # Look for potentially dangerous patterns
        if grep -n "eval\|innerHTML\|document.write" index.html; then
          echo "⚠️ Found potentially dangerous JavaScript patterns"
        else
          echo "✅ No obvious dangerous patterns found"
        fi
        
        # Check for hardcoded secrets (basic patterns)
        if grep -iE "(password|secret|key|token).*=.*['\"][^'\"]{8,}" index.html; then
          echo "⚠️ Potential hardcoded secrets found"
        else
          echo "✅ No obvious hardcoded secrets found"
        fi


  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-audit, license-compliance, code-scanning]
    if: always()
    
    steps:
    - name: Generate security summary
      run: |
        echo "# Security Summary Report - $(date)" > security-summary.md
        echo "" >> security-summary.md
        echo "## Job Results" >> security-summary.md
        echo "- Dependency Audit: ${{ needs.dependency-audit.result }}" >> security-summary.md
        echo "- License Compliance: ${{ needs.license-compliance.result }}" >> security-summary.md
        echo "- Code Scanning: ${{ needs.code-scanning.result }}" >> security-summary.md
        echo "" >> security-summary.md
        
        # Overall assessment
        if [[ "${{ needs.dependency-audit.result }}" == "success" && 
              "${{ needs.license-compliance.result }}" == "success" && 
              "${{ needs.code-scanning.result }}" == "success" ]]; then
          echo "## Overall Status: ✅ PASS" >> security-summary.md
          echo "All security checks passed successfully." >> security-summary.md
        else
          echo "## Overall Status: ⚠️ REVIEW REQUIRED" >> security-summary.md
          echo "Some security checks failed or require attention." >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## Recommendations" >> security-summary.md
        echo "- Regularly update dependencies to latest secure versions" >> security-summary.md
        echo "- Review and validate all third-party dependencies" >> security-summary.md
        echo "- Monitor security advisories for used packages" >> security-summary.md
        echo "- Follow secure coding practices" >> security-summary.md
        
